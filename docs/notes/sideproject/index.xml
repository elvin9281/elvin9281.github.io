<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Garlic Notes</title><link>https://elvin9281.github.io/docs/notes/sideproject/</link><description>Recent content on Garlic Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://elvin9281.github.io/docs/notes/sideproject/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://elvin9281.github.io/docs/notes/sideproject/c_str/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/notes/sideproject/c_str/</guid><description>C String # Makfile # CC = gcc # 定義編譯選項 CFLAGS = -Wall -Wextra -std=c11 -fPIC LDFLAGS = -shared # 定義可執行文件名和共享庫名 TARGET = myprogram TARGET_LIB = libstr_utils.so # 定義源文件 SRCS = main.c LIB_SRCS = str_utils.c # 定義目標文件 OBJS = $(SRCS:.c=.o) LIB_OBJS = $(LIB_SRCS:.c=.o) # 默認目標 all: $(TARGET_LIB) $(TARGET) # 編譯共享庫 $(TARGET_LIB): $(LIB_OBJS) $(CC) $(LDFLAGS) -o $@ $^ # 編譯可執行文件，並鏈接共享庫 $(TARGET): $(OBJS) $(CC) $(CFLAGS) -o $(TARGET) $(OBJS) -L. -lstr_utils # 編譯目標文件 %.</description></item><item><title/><link>https://elvin9281.github.io/docs/notes/sideproject/jwt_auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/notes/sideproject/jwt_auth/</guid><description>JWT Auth # https://github.com/elvin9281/jwt_auth
Flow # 目的：用 docker compose 將 Apifox 測試後端的流程串起來 # Makfile # Usage: make [target] Targets: up - All Services up down - All Services down clean_all - Clean all images ls - Running services up by docker-compose into_db - Go into postgres container build_apifox - Build apifox container image docker-compose 的 Service Discovery # 注意：都在 app-net 的情況下，apifox Container 打到 backend Container 的 URL 會是 http://backend.</description></item></channel></rss>