<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Garlic Notes</title><link>https://elvin9281.github.io/docs/docker/concept/</link><description>Recent content on Garlic Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://elvin9281.github.io/docs/docker/concept/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://elvin9281.github.io/docs/docker/concept/commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/docker/concept/commands/</guid><description>Docker &amp;amp; Container Commands # 紀錄常用的指令
Images # 查看目前 Images(不包含「Intermediate Images」) Docker 17.05+ 以後提供名為「多階段構建 (multi-stage builds)」的新功能，透過將原先流水線中的多個映像檔整合進同個 Dockerfile 內，而後續的映像檔可透過指令取得中間映像檔 (intermediate image) 所產生的檔案 (artifacts)，如此便能讓整個過程更為簡單，也確保流水線簡潔易懂及提高維護性
docker images // or docker image ls 查看目前 Images(含「Intermediate Images」) docker images -a // or docker image ls -a 只列出所有 Images 的 ID(不含「Intermediate Images」) docker images -q // or docker image ls -q 只列出所有 Images 的 ID(含「Intermediate Images」) docker images -qa // or docker image ls -qa 建立一個名稱為 busybox 的 Image -i : Interactive，Keep STDIN open even if not attached \n -t : Allocate a pseudo-TTY docker create -it --name busybox busybox 強制刪 Docker Image (用 ID) docker rmi -f &amp;lt;Image_ID&amp;gt; 強制刪除所有 docker images(含「Intermediate Images」) docker rmi -f $(docker images -q) Container # 自動執行 docker pull(若 Local 無該 Image)，啟動並進入背景執行 -d : Run container in background and print container ID</description></item></channel></rss>