<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Garlic Notes</title><link>https://elvin9281.github.io/</link><description>Recent content in Introduction on Garlic Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://elvin9281.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://elvin9281.github.io/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://elvin9281.github.io/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://elvin9281.github.io/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://elvin9281.github.io/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://elvin9281.github.io/docs/linux/basic/commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/linux/basic/commands/</guid><description>Commands # 紀錄常用的指令
tar for .tar.gz # 壓縮： tar zcvf FileName.tar.gz DirName 解壓縮： tar zxvf FileName.tar.gz screen # 開啟一個互動式的 Shell screen Detach 互動式的 Shell Crtl + A + d 列所有 互動式的 Shell(會列出 Session ID) screen -ls Attach 到互動式的 Shell screen -r screen -r + SessionID 結束 互動式的 Shell exit uname - Get Kernel Version # uname -a 4 : Kernel version 19 : Major revision 0 : Minor revision 17 : Patch level or number</description></item><item><title/><link>https://elvin9281.github.io/docs/linux/basic/redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/linux/basic/redirect/</guid><description>Redirect # Shell 提供「可以取得任一執行中的程式，再更改 取得輸入 或 產生輸出 的方式，而 不必修改程式本身」
執行handywork，輸入是名為「data.in」的檔案，輸出到名為「result.out」的檔案 # handywork &amp;lt; data.in &amp;gt; result.out 把執行handywork的錯誤導到名為 err.msgs 的檔案 # 檔案描述符：stdin：0, stdout：1, stderr：2
handywork &amp;lt; data.in &amp;gt; result.out 2&amp;gt; err.msgs 把「錯誤訊息(stderr：2)」和「正常輸出(stdout：1)」導到名為 result.out 的檔案」(如果沒有1, 錯誤訊息就只會被寫進 一個名為1的檔案裡 ) # handywork &amp;lt; data.in &amp;gt; result.out 2&amp;gt;&amp;amp;1 or
handywork &amp;lt; data.in &amp;amp;&amp;gt; result.out Bash - 解釋「echo &amp;ldquo;hey&amp;rdquo; &amp;gt;&amp;amp;2」 # Ref: https://stackoverflow.com/questions/23489934/echo-2-some-text-what-does-it-mean-in-shell-scripting
Bash - 解釋 XXX &amp;gt; /dev/nell &amp;gt; 2&amp;gt;&amp;amp;1 # 將左邊程式的所有標準輸出 stdout, 及標準錯誤輸出 stderr 導向到 /dev/null, 即左邊的程式只會執行, 而不會輸出任何程式執行的結果</description></item><item><title/><link>https://elvin9281.github.io/docs/linux/basic/vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/linux/basic/vim/</guid><description>vim - Editor # 一般指令模式 (command mode) # 選取單字：v 整行：shift+v
複製選取後，按 y
貼上將剛剛複製的內容在想貼上的地方，按 p
刪除選取後，按 d
復原上一步按 u
重做上一步Ctrl + r
搜尋按 / ，若想繼續搜尋，按 n
移至檔尾（最後一行的第一個非空白字元處）按 G
移至檔首（第一行之第一個非空白字元處）按 gg
前往特定行數: + 行數
前往成對的括號 ([{}])、/* */按 %
PageUp 翻頁Ctrl+b
PageDown 翻頁Ctrl+f
多行註解在想加註解的最頂行 ctrl + v ，選到最底行 shift + i 加入要註解的字 ( e.</description></item><item><title/><link>https://elvin9281.github.io/docs/linux/network/brctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/linux/network/brctl/</guid><description>brctl - ethernet bridge administration # Create New Ethernet Bridge brctl addbr br0 Display Available Bridge brctl show Delete Existing Bridge brctl delbr br0 Add an Interface/Multiple Interfaces to Existing Bridge brctl addif br0 eth0 eth1 Tracking MAC address of a Bridge brctl showmacs br0 Enable/Disable Spanning Tree on Ethernet Bridge # Enable brctl stp br0 on # Disable brctl stp br0 off Display STP Parameter Values of a Bridge brctl showstp br0</description></item><item><title/><link>https://elvin9281.github.io/docs/linux/network/curl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://elvin9281.github.io/docs/linux/network/curl/</guid><description>curl - 與 Server 間傳輸資料的工具，支援多種協定(HTTP, HTTPS, SCP, TELNET, 等等 ) # -k: 略過檢查自簽 SSL 憑證有效性 $ curl -k https://domainname</description></item></channel></rss>